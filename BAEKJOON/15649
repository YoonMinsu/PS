// N과 M 문제 조합과 순열 문제

import java.io.IOException;
import java.io.BufferedWriter;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

public class Main {

    public static void permutation( int[] arr, int[] out, boolean[] visited, int depth, int n, int r ) {
        if ( depth == r ) {
            print( out, r );
            return;
        }

        for ( int i = 0; i < n; ++i ) {
           if( !visited[ i ] ) {
               visited[ i ] = true;
               out[ depth ] = arr[ i ];
               permutation( arr, out, visited, depth + 1, n, r );
               visited[ i ] = false;
           }
        }
    }

    public static void print( int[] out, int r ) {
        for ( int i = 0; i < r; ++i ) {
            System.out.print( out[ i ] + " " );
        }
        System.out.println();
    }

    public static void main( String[] args ) throws IOException {
        BufferedReader br = new BufferedReader( new InputStreamReader( System.in ) );

        String[] line = br.readLine().split( " " );
        int n = Integer.parseInt( line[ 0 ] );
        int m = Integer.parseInt( line[ 1 ] );

        int[] arr = new int[ n ];
        int[] out = new int[ n ];
        boolean[] visited = new boolean[ n ];


        for ( int i = 0; i < n; ++i ) {
            arr[ i ] = i + 1;
        }

        permutation( arr, out, visited, 0, n, m );

    }
}
